var documenterSearchIndex = {"docs":
[{"location":"usage/#Usage","page":"Usage","title":"Usage","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Function Description\nθ(g) Lovasz theta function of the graph g.\nθ(g, w) Weighted Lovasz theta function of the graph g. Weights must be non-negative.\nθ⁻(g) Schrijver theta function of the graph g.\nθ⁻(g, w) Weighted Schrijver theta function of the graph g. Weights must be non-negative.\nθ⁺(g) Szegedy theta function of the graph g.\nθ⁺(g, w) Weighted Szegedy theta function of the graph g. Weights must be non-negative.\nw ∈ a * TH(g) Constrain Convex.Variable w to be within theta body (optionally) scaled by Variable a.\ntheta_dual_weight(g, w) Compute the weight v that saturates the inequality θ(g, w) * θ(complement(g), v) ≥ w' v.\ntheta_solution(g, w) Compute θ(g, w) and return the matrices associated with the optimal solution.  See docstring for details.","category":"page"},{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [LovaszTheta]\nPrivate = false","category":"page"},{"location":"reference/#LovaszTheta.TH","page":"Reference","title":"LovaszTheta.TH","text":"TH(g::AbstractGraph)\n\nCreates the theta body of the supplied graph.  The * operator can be used to scale this theta body by a non-negative constant or by a scalar Convex.Variable.\n\njulia> problem = maximize(sum(w), [w in TH(g)])\n\njulia> problem = minimize(λ, [w in λ*TH(g)])\n\n\n\n\n\n","category":"function"},{"location":"reference/#LovaszTheta.theta_dual_weight-Tuple{Graphs.AbstractGraph, AbstractVector{<:Number}}","page":"Reference","title":"LovaszTheta.theta_dual_weight","text":"theta_dual_weight(g::AbstractGraph, w::AbstractArray{<:Number, 1})\n\nCompute the weight v that saturates the inequality θ(g, w) * θ(complement(g), v) ≥ w' v.\n\nThe returned weight vector will be normalized such that θ(complement(g), v) = 1.\n\n\n\n\n\n","category":"method"},{"location":"reference/#LovaszTheta.theta_solution-Tuple{Graphs.AbstractGraph, AbstractVector{<:Number}}","page":"Reference","title":"LovaszTheta.theta_solution","text":"theta_solution(g::AbstractGraph, w::AbstractArray{<:Number, 1})\n\nCompute the optimal matrices for the various formulations of θ.  Returns a named tuple (λ, R, Y, Z, B, T) satisfying the following:\n\nλ = θ(g, w)\n\nR[i,j] = sqrt(w[i]*w[j])\n\nY ⪰ R\ndiag(Y) = λ*I\nY[i,j] = 0 unless i=j or i∼j\n\ndiag(Z) = w\n[λ w'; w Z] ⪰ 0\nZ[i,j] = 0 unless i=j or i∼j\n\nB ⪰ 0\ntr(B) = 1\ntr(B*R) = λ\nB[i,j] = 0 for i∼j\n\nT ⪰ 0\ndiag(T) = w\n|T| = λ\nT[i,j] = 0 for i∼j\n\n\n\n\n\n","category":"method"},{"location":"reference/#LovaszTheta.θ-Tuple{Graphs.AbstractGraph, AbstractMatrix{<:Number}}","page":"Reference","title":"LovaszTheta.θ","text":"θ(g::AbstractGraph, w::AbstractArray{<:Number, 2})\n\nCompute the matrix weighted Lovasz theta function for the given graph.\n\n\n\n\n\n","category":"method"},{"location":"reference/#LovaszTheta.θ-Tuple{Graphs.AbstractGraph, AbstractVector{<:Number}}","page":"Reference","title":"LovaszTheta.θ","text":"θ(g::AbstractGraph, w::AbstractArray{<:Number, 1})\n\nCompute the weighted Lovasz theta function for the given graph.\n\n\n\n\n\n","category":"method"},{"location":"reference/#LovaszTheta.θ-Tuple{Graphs.AbstractGraph, Convex.AbstractExpr}","page":"Reference","title":"LovaszTheta.θ","text":"θ(g::AbstractGraph, w::Convex.AbstractExpr)\n\nReturns λ bounded from below by θ(g, w).  The constraint θ(g, w) ≤ 1 is equivalent to w ∈ TH(complement(g)), the theta body of the complement graph.\n\n\n\n\n\n","category":"method"},{"location":"reference/#LovaszTheta.θ-Tuple{Graphs.AbstractGraph}","page":"Reference","title":"LovaszTheta.θ","text":"θ(g::AbstractGraph)\n\nCompute the Lovasz theta function for the given graph.\n\n\n\n\n\n","category":"method"},{"location":"reference/#LovaszTheta.θ⁺-Tuple{Graphs.AbstractGraph, AbstractVector{<:Number}}","page":"Reference","title":"LovaszTheta.θ⁺","text":"θ(g::AbstractGraph, w::AbstractArray{<:Number, 1})\n\nCompute the weighted Szegedy theta function for the given graph.\n\n\n\n\n\n","category":"method"},{"location":"reference/#LovaszTheta.θ⁺-Tuple{Graphs.AbstractGraph}","page":"Reference","title":"LovaszTheta.θ⁺","text":"θ(g::AbstractGraph)\n\nCompute the Szegedy theta function for the given graph.\n\n\n\n\n\n","category":"method"},{"location":"reference/#LovaszTheta.θ⁻-Tuple{Graphs.AbstractGraph, AbstractVector{<:Number}}","page":"Reference","title":"LovaszTheta.θ⁻","text":"θ(g::AbstractGraph, w::AbstractArray{<:Number, 1})\n\nCompute the weighted Schrijver theta function for the given graph.\n\n\n\n\n\n","category":"method"},{"location":"reference/#LovaszTheta.θ⁻-Tuple{Graphs.AbstractGraph}","page":"Reference","title":"LovaszTheta.θ⁻","text":"θ(g::AbstractGraph)\n\nCompute the Schrijver theta function for the given graph.\n\n\n\n\n\n","category":"method"},{"location":"#LovaszTheta.jl-Lovasz-theta-function-and-theta-body-for-graphs","page":"Home","title":"LovaszTheta.jl - Lovasz theta function and theta body for graphs","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"LovaszTheta.jl provides functions for computing the Lovasz θ, Schrijver θ⁻, and Szegedy θ⁺ functions of a graph.  These provide upper bounds on the independence number of a graph and lower bounds on the chromatic number of the complement graph.  They are homomorphism monotones, and so can be used to provide necessary conditions on the existence of a homomorphism between a pair of graphs.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Variations of these functions are available which accept a vector of vertex weights.  The theta body is available as a semidefinite programming subroutine - it is possible to constrain a Convex.jl variable to be within the theta body.","category":"page"},{"location":"#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Graphs, LovaszTheta\n@assert abs(θ(cycle_graph(5)) - √5) < 1e-7","category":"page"},{"location":"","page":"Home","title":"Home","text":"Test that maxleftsum w_i middle w in textrmTH(g) right = theta(g).","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Graphs, LovaszTheta, Convex, SCS\ng = erdos_renyi(20, 0.5);\nw = Variable(nv(g));\nproblem = maximize(sum(w), [w ∈ TH(g)]);\nsolve!(problem, () -> SCS.Optimizer(verbose=0, eps=1e-8))\n@assert abs(problem.optval - θ(g)) < 1e-7","category":"page"},{"location":"","page":"Home","title":"Home","text":"Test entropy splitting (Entropy splitting for antiblocking corners and perfect graphs).","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Graphs, LovaszTheta, Convex, SCS\n\nfunction corner_entropy(p, corner)\n    w = Variable(nv(g))\n    problem = minimize(-p' * log(w), [w ∈ corner])\n    solve!(problem, () -> SCS.Optimizer(verbose=0, eps=1e-8))\n    return problem.optval\nend\n\ng = erdos_renyi(20, 0.5)\np = normalize(rand(nv(g)), 1)\nent = -p'*log.(p)\nce1 = corner_entropy(p, TH(g))\nce2 = corner_entropy(p, TH(complement(g)))\n@assert abs(ent - (ce1 + ce2)) < 1e-7","category":"page"},{"location":"","page":"Home","title":"Home","text":"More examples can be found in the unit tests.","category":"page"}]
}
